FAQ:

Q1: What should I expect from the tex file used for the performaced test?

A1: You should assume it's a standalone tex file (see pdf). Also, it compiles, and it is typeset in English.


Q2: Can we submit any files other than just encoder and decoder (e.g. a dictionary used in encoding)?

A2: Yes


Q3: are we allowed to adapt code found elsewhere, e.g. stackoverflow?

A3: Yes, but you must properly cite that code. Also, note that adapting existing code may not give high marks for the report.


Q4: can we include more than 6 ideas in the implementation, provided we only explain 6 in the report?

A4: Yes


Q5: when you say the report must be typed in latex, are you expecting it to be submitted as a .tex file or a .pdf?

A5: pdf


Q6: So if I've just described an idea I've adapted, I would get 0 marks for it, whereas if it was completely novel I would get 5 marks? (provided that the performance is reasonable)

A6: It's not so clear cut. An idea that should perform well but is already implemented (e.g. "I am using deflate") is not likely to give you full marks, but I would almost surely award yuo some marks for it. Especially if you can justify why that idea is appropriate for the setting of the coursework. Likewise, if you have a very unexpected idea but you cannot convince me that it makes sense/is appropriate, then you are not going to get full marks.


Q7: What exactly do you mean by 'original'? Are we not just implementing existing compression methods?

A7: Again, that is difficult to define. I expect that some of your ideas will be taken from the course, but others will be your own. I value ideas that come from other modules (past or current) or from compression methods that we haven't seen in the course. But it's very difficult to properly assess the originality/appropriateness of an idea.


Q8: are there any limits on the libraries we can use?

A8: If pip can install it, then it should be fine. Otherwise, I may have to contact you.


Q9: on the library limit point, I'm assuming if I get a python library that performs zip and just use that, that's probably bad right?

A9: See A6. It's not good for the report indeed. I'm confident that a lot of student will beat the compression ratio of zip, so it would be bad for the performance part too!


Q10: in terms of originality, how many marks does an idea from class get?

A10: See A7.


Q11: Also, is there any limit on the running time?

A11: No, but in any case the test file is only ca. 1MB in size, so even a slow encoder shouldn't take more than 10 minutes. This being said, if your code is extremely slow and it looks like it's stuck, then I might contact you. 


Q12: should the code be commented?

A12: I am not requiring that your code should be commented. But you should do it, it's good practice!


Q13: How is the attack plan marked? i.e. if it is a successful attack plan, does it receive 20 marks? Is it marked for how novel it is?

A13: The marking scheme for the attack plan is difficult to pinpoint. If your attack is successful, then you will most probably get a high mark but I expect some explanation and analysis. On the other hand, yuo needn't carry out the attack to get a high mark on the attack plan.


Q14: What's the due date?

A14: 21/01/2021


Q15: Just to check are we expected to be coming up with an implementation, as in if we just use a existing password cracking software would that not be correct?

A15: You are expected to come up with an implementation.


Q16: I just wanted to ask how the size of any dictionary/data structures used in the LaTeX compression part of our coursework will impact our mark.
Would it be acceptable to have a very large encoding/decoding dictionary if that meant we had a smaller .lz file, or will you be taking into account the combined size of both files?

A16: You may use a large static dictionary, i.e. the dictionary should not be produced from the given input tex file. Then only the size of the .lz counts. But make sure that your python program works with the testEncoderDecoder.py script provided.


Q17: Is it acceptable for one or more of the key ideas mentioned in the report to not make it into the final compression algorithm? As in, I tried idea X as I thought it may improve performance of my algorithm, however it proved to be redundant in the testing I performed, so I didn't include it.

A17: Yes, absolutely. But the report should make it clear what has been implemented and what hasn't. Also, if you mention an idea that you haven't implemented, then the justification for why it wasn't included is important.


Q18:  will it be okay to have a single python file that carries out both encoding and decoding of the input file rather than 2 separate files?

A18: No, you need two separate files. Make sure your program works with the script provided.


Q19:  Is  the input file you use to test a standard file using only ASCII characters?

A19:  I will be using a standard latex file in ASCII (that does not use the inputenc package). However, if your code can handle utf-8 then that's absolutely fine.


Q20:   Please could you explain what constitutes as an "idea" ?

A20: That's tricky... Imagine you only had one slide to talk about your work with six bullet points : what would you write?


Q21: For the .tex files you are testing with, will they have CRLF line endings, LF line endings or a mix of both?

A21: You should be ready for any case.


Q22: What exactly counts as one "idea" in compression? How should we split them in the report?

A22: See A17 and A20.


Q23: Will you check our encoder/decoder for error-handling (empty or otherwise incorrect inputs)?

A23: No, you needn't worry about that.


Q24: Will the file be encoded in ASCII ("latin-1" in Python) or Unicode ("utf-8")?

A24: See A20.


Q25: Will the file have Windows or Unix style line endings?

A25: See A21.


Q26: Should the compression report focus on compression performance, time/space complexity and/or implementation details of our approaches?

A26: It's difficult to assess the "quality" of a idea. Please try and convince me of either its originality (esp. if it's your own idea) or its appropriateness (e.g. how does it improve compression performance). Since the performance test does not assess complexity, I suggest you leave that discussion out ouf the report entirely.


Q27: Does everything that the decoder needs to reconstruct the input need to be stored in the .lz file if we're going for a dynamic approach? Eg for huffman coding could the .lz file be just the binary string, but a dynamically-constructed frequency table be stored elsewhere in a different file?

A27: For the example you give, the answer is No because the auxiliary file is based on the input file. However, you may use a static file (e.g. the frequency table of the English language) that does not depend on the input file. See A16.


Q28: How/where should we inform you of which packages you need to pip install?

A28: Sorry I forgot to mention that. You may include package information at the end of your report.


Q29: in your lecture notes, you say that LZW is patented. Does this mean we canâ€™t implement it for the assignment, or would it be okay to use in this case?

A29: ALl patents for LZW expired by 2004, so it's okay to use it.
